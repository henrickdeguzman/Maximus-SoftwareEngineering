/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg124guirevision;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author renziverdb
 */
public class DentalRecords extends javax.swing.JFrame
{

    Connection conn;
    String appId = "";
    String tn = "";
    String d = "";
    String dn = "";
    String ta = "";
    String a = "";
    String b = "";
    static int patId;
    private static int ptrID;
    /**
     * Creates new form PatientRecord
     */
    public DentalRecords()
    {
        initComponents();
    }
    public DentalRecords(int patId)
    {
        this.patId = patId;
    }
       
    public void setPatientID(int values){
        
        
        this.ptrID=values;
        
    }
    
    public static int getPatientID(){
        return ptrID;
    }
    int dd= getPatientID();

    private void display() throws SQLException
    {
        try
        {
            Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/Dental Clinic", "maximus", "maximus123");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HeaderPatient = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        GoBackBtn = new javax.swing.JButton();
        MainPanelPatient = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dentalTable = new javax.swing.JTable();
        addEntry = new javax.swing.JButton();
        updateEntry = new javax.swing.JButton();
        archiveEntry = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        patientID = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        patientLName = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        patientFName = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Patient Record | Diamse - Montero Dental Clinic");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        HeaderPatient.setBackground(new java.awt.Color(52, 152, 219));

        jLabel1.setBackground(new java.awt.Color(239, 249, 247));
        jLabel1.setFont(new java.awt.Font("Avenir", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(239, 249, 247));
        jLabel1.setText("DIAMSE - MONTERO ");

        jLabel2.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        jLabel2.setText("D  E  N  T  A  L    C  L  I  N  I  C  ");

        GoBackBtn.setText("BACK");
        GoBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoBackBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HeaderPatientLayout = new javax.swing.GroupLayout(HeaderPatient);
        HeaderPatient.setLayout(HeaderPatientLayout);
        HeaderPatientLayout.setHorizontalGroup(
            HeaderPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderPatientLayout.createSequentialGroup()
                .addContainerGap(182, Short.MAX_VALUE)
                .addGroup(HeaderPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HeaderPatientLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(GoBackBtn)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HeaderPatientLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(158, 158, 158))))
        );
        HeaderPatientLayout.setVerticalGroup(
            HeaderPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderPatientLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HeaderPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(GoBackBtn))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        getContentPane().add(HeaderPatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanelPatient.setBackground(new java.awt.Color(41, 128, 185));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/teeth colored v3.jpg"))); // NOI18N

        dentalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tooth No.", "Date", "Description", "Total Amount", "Amount Paid", "Balance Due"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dentalTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(dentalTable);
        if (dentalTable.getColumnModel().getColumnCount() > 0) {
            dentalTable.getColumnModel().getColumn(0).setMaxWidth(50);
            dentalTable.getColumnModel().getColumn(1).setMinWidth(150);
            dentalTable.getColumnModel().getColumn(1).setMaxWidth(150);
            dentalTable.getColumnModel().getColumn(3).setMinWidth(150);
            dentalTable.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        addEntry.setText("Add Entry");
        addEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEntryActionPerformed(evt);
            }
        });

        updateEntry.setText("Update Entry");
        updateEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateEntryActionPerformed(evt);
            }
        });

        archiveEntry.setText("Archive Entry");
        archiveEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archiveEntryActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("ID: ");

        patientID.setForeground(new java.awt.Color(255, 255, 255));
        patientID.setText("40");

        jLabel4.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("LAST NAME:");

        patientLName.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        patientLName.setForeground(new java.awt.Color(255, 255, 255));
        patientLName.setText("LN");

        jLabel6.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("FIRST NAME:");

        patientFName.setForeground(new java.awt.Color(255, 255, 255));
        patientFName.setText("FN");

        javax.swing.GroupLayout MainPanelPatientLayout = new javax.swing.GroupLayout(MainPanelPatient);
        MainPanelPatient.setLayout(MainPanelPatientLayout);
        MainPanelPatientLayout.setHorizontalGroup(
            MainPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainPanelPatientLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(MainPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainPanelPatientLayout.createSequentialGroup()
                                .addComponent(addEntry)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updateEntry)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(archiveEntry)
                                .addGap(126, 126, 126))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainPanelPatientLayout.createSequentialGroup()
                                .addGroup(MainPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, MainPanelPatientLayout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addComponent(jLabel7)
                                        .addGap(33, 33, 33)
                                        .addComponent(patientID)
                                        .addGap(63, 63, 63)
                                        .addComponent(jLabel4)
                                        .addGap(44, 44, 44)
                                        .addComponent(patientLName)
                                        .addGap(50, 50, 50)
                                        .addComponent(jLabel6)
                                        .addGap(60, 60, 60)
                                        .addComponent(patientFName)))
                                .addGap(99, 99, 99))))
                    .addGroup(MainPanelPatientLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(99, 99, 99))))
        );
        MainPanelPatientLayout.setVerticalGroup(
            MainPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelPatientLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel3)
                .addGap(23, 23, 23)
                .addGroup(MainPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(patientID)
                    .addComponent(jLabel4)
                    .addComponent(patientLName)
                    .addComponent(patientFName)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(MainPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addEntry)
                    .addComponent(updateEntry)
                    .addComponent(archiveEntry))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(MainPanelPatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 700, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GoBackBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_GoBackBtnActionPerformed
    {//GEN-HEADEREND:event_GoBackBtnActionPerformed
        new PatientRecords().setVisible(true);
        super.dispose();
    }//GEN-LAST:event_GoBackBtnActionPerformed

    private void addEntryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addEntryActionPerformed
    {//GEN-HEADEREND:event_addEntryActionPerformed

        new AddDentalRecord().setVisible(true);
       // super.dispose();

        //CODE HERE
    }//GEN-LAST:event_addEntryActionPerformed

    private void archiveEntryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_archiveEntryActionPerformed
    {//GEN-HEADEREND:event_archiveEntryActionPerformed
         try
        {
         int index = dentalTable.getSelectedRow();
        TableModel model = dentalTable.getModel();
        tn = model.getValueAt(index, 1).toString();
        d = model.getValueAt(index, 2).toString();
        dn = model.getValueAt(index, 3).toString();
        ta = model.getValueAt(index, 4).toString();
        a = model.getValueAt(index, 5).toString();
        b = model.getValueAt(index, 6).toString();
        setPatientID(Integer.parseInt(appId));
        
        }catch(Exception e){
            
        }
        
           System.out.println(patId);
            Object dt = d;
            Double total = Double.parseDouble(ta);
            Double ap = Double.parseDouble(a);
            Double bd = Double.parseDouble(b);
            String ts = ZonedDateTime.now().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.MEDIUM));
            transfer(patId, tn, dt, dn, total, ap, bd, ts);
            
    }//GEN-LAST:event_archiveEntryActionPerformed

    private void updateEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateEntryActionPerformed
        // TODO add your handling code here:
        
        
          try
        {
         int index = dentalTable.getSelectedRow();
        TableModel model = dentalTable.getModel();
        String id = model.getValueAt(index, 0).toString();
       
        setPatientID(Integer.parseInt(id));
        
        }catch(Exception e){
            
        }
          
          new UpdateDentalRecord().setVisible(true);
           // super.dispose();
    }//GEN-LAST:event_updateEntryActionPerformed
    
    private void transfer(int id, String tn, Object dt, String dn, Double total, Double ap, Double bd, String da)
    {
        
        try
        {
            Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/Dental Clinic", "maximus", "maximus123");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            
            String qry = "INSERT INTO DENTAL_RECORD_ARCHIVED(PATIENT_ID, TOOTH_NO, PATIENT_DATE, DESCRIPTION, TOTAL_AMOUNT , AMOUNT_PAID,BALANCE,DATE_ARCHIVED) VALUES(?, ?, ?, ?, ?, ?, ?,?)";
            PreparedStatement pstmt = conn.prepareStatement(qry);
            pstmt.setInt(1, id);
            pstmt.setString(2, tn);
            pstmt.setObject(3, dt);
            pstmt.setString(4, dn);
            pstmt.setDouble(5, total);
            pstmt.setDouble(6, ap);
            pstmt.setDouble(7, bd);
            pstmt.setString(8, da);
            pstmt.executeUpdate();
            
            String qry1 = "DELETE FROM DENTAL_RECORD WHERE PATIENT_ID = ? AND TOOTH_NO = ? AND PATIENT_DATE = ? AND DESCRIPTION = ? AND TOTAL_AMOUNT = ? AND AMOUNT_PAID = ? AND BALANCE = ?";
            PreparedStatement pstmt1 = conn.prepareStatement(qry1);
            pstmt1.setInt(1, id);
            pstmt1.setString(2, tn);
            pstmt1.setObject(3, dt);
            pstmt1.setString(4, dn);
            pstmt1.setDouble(5, total);
            pstmt1.setDouble(6, ap);
            pstmt1.setDouble(7, bd);
            pstmt1.executeUpdate();
  
            
            String qryh = "INSERT INTO HISTORY(DATE, EVENT) VALUES(?,?)";
            PreparedStatement pstmth = conn.prepareStatement(qryh);
            pstmth.setString(1, da);
            pstmth.setString(2,"Deleted Dental Record for  Patient # "+patId+" Name: " +patientLName.getText()+", "+patientFName.getText()+".");
            pstmth.executeUpdate();             
            
            
            JOptionPane.showMessageDialog(null, "The data has successfully archived!");
            DefaultTableModel model = (DefaultTableModel) dentalTable.getModel();
            model.setRowCount(0);
            
            String s ="SELECT * FROM DENTAL_RECORD WHERE PATIENT_ID = ?";
            PreparedStatement pstmt2 = conn.prepareStatement(s);
            pstmt2.setInt(1, id);
            ResultSet rs = pstmt2.executeQuery();
            
            DefaultTableModel model1 = (DefaultTableModel) dentalTable.getModel();
            Object rowData[] = new Object[7];
            while (rs.next())
            {
                rowData[0] = rs.getInt("TRANSACTION_ID");
                rowData[1] = rs.getString("TOOTH_NO");
                rowData[2] = rs.getObject("PATIENT_DATE");
                rowData[3] = rs.getString("DESCRIPTION");
                rowData[4] = rs.getDouble("TOTAL_AMOUNT");
                rowData[5] = rs.getDouble("AMOUNT_PAID");
                rowData[6] = rs.getDouble("BALANCE");
                model1.addRow(rowData);
            }
            rs.close();
            pstmt2.close();

        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Windows".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(DentalRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(DentalRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(DentalRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(DentalRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new DentalRecords().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GoBackBtn;
    private javax.swing.JPanel HeaderPatient;
    private javax.swing.JPanel MainPanelPatient;
    private javax.swing.JButton addEntry;
    private javax.swing.JButton archiveEntry;
    public javax.swing.JTable dentalTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel patientFName;
    public javax.swing.JLabel patientID;
    public javax.swing.JLabel patientLName;
    private javax.swing.JButton updateEntry;
    // End of variables declaration//GEN-END:variables
}
